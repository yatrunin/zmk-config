/*
 * Copyright (c) 2023 Andrei Gaevskii
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };

&mt { quick_tap_ms = <200>; };

/ {
    behaviors {
        td_cl: td_cl {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_CL";
            #binding-cells = <0>;
            bindings = <&kp LEFT>, <&kp LC(LEFT)>;
        };

        td_cr: td_cr {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_CR";
            #binding-cells = <0>;
            bindings = <&kp RIGHT>, <&kp LC(RIGHT)>;
        };

        td_sm: td_sm {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SM";
            #binding-cells = <0>;
            bindings = <&kp K_MUTE>, <&kp LC(LS(A))>;
        };

        td_dots: td_dots {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_DOTS";
            #binding-cells = <0>;
            bindings = <&kp KP_DOT>, <&kp SEMICOLON>, <&kp LS(SEMICOLON)>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        l_br {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <19 20>;
            layers = <2>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <30 31>;
            layers = <2>;
        };

        r_br {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <21 22>;
            layers = <2>;
        };

        l_sq_br {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <7 8>;
            layers = <2>;
        };

        r_sq_br {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <9 10>;
            layers = <2>;
        };

        f_for {
            bindings = <&kp F4>;
            key-positions = <10 11>;
            layers = <2>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        t2 {
            bindings = <&tog 2>;
            key-positions = <36 43>;
        };

        l_fig_br {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <31 32>;
            layers = <2>;
        };

        r_fig_br {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <33 34>;
            layers = <2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &mt LGUI RBKT       &kp Q  &kp W   &kp E      &kp R             &kp T           &kp Y         &kp U                 &kp I         &kp O    &kp P     &mt RGUI LBKT
  &mt LCTRL GRAVE     &kp A  &kp S   &kp D      &kp F             &kp G           &kp H         &kp J                 &kp K         &kp L    &kp SEMI  &mt RCTRL SQT
  &mt LEFT_ALT MINUS  &kp Z  &kp X   &kp C      &kp V             &kp B           &kp N         &kp M                 &kp COMMA     &kp DOT  &kp FSLH  &mt RALT BSLH
                             &td_cl  &lt 2 TAB  &mt LSHIFT SPACE  &lt 1 RETURN    &lt 1 ESCAPE  &mt RSHIFT BACKSPACE  &lt 2 DELETE  &td_cr
            >;
        };

        lower_layer {
            bindings = <
  &mt LEFT_GUI F1  &kp F2    &kp F3  &kp F4     &kp F5    &kp F6       &kp F7     &kp F8    &kp F9        &kp F10   &kp F11   &kp F12
  &mt LCTRL PLUS   &kp EXCL  &kp AT  &kp HASH   &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS  &kp STAR      &kp LPAR  &kp RPAR  &mt RCTRL MINUS
  &mt LALT EQUAL   &kp N1    &kp N2  &kp N3     &kp N4    &kp N5       &kp N6     &kp N7    &kp N8        &kp N9    &kp N0    &mt RALT EQUAL
                             &trans  &lt 3 TAB  &trans    &trans       &trans     &trans    &lt 3 DELETE  &trans
            >;
        };

        raise_layer {
            bindings = <
  &kp CAPS                  &kp HOME          &kp PAGE_DOWN     &kp PAGE_UP           &kp END            &mkp MCLK       &kp KP_MINUS  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_SLASH     &mt RIGHT_GUI KP_NLCK
  &mt LCTRL PAUSE_BREAK     &kp LEFT_ARROW    &kp DOWN          &kp UP_ARROW          &kp RIGHT          &mkp RCLK       &kp KP_PLUS   &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_MULTIPLY  &mt RCTRL EQUAL
  &mt LEFT_ALT PRINTSCREEN  &kp LC(LS(LEFT))  &kp LC(LS(DOWN))  &kp LC(LS(UP_ARROW))  &kp LC(LS(RIGHT))  &mkp LCLK       &kp KP_N0     &kp KP_N1  &kp KP_N2  &kp KP_N3  &td_dots         &trans
                                              &trans            &trans                &trans             &lt 3 RETURN    &lt 3 ESCAPE  &trans     &trans     &trans
            >;
        };

        adjust_layer {
            bindings = <
  &bootloader  &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &bootloader
  &bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
  &sys_reset   &none         &none         &none         &none         &out OUT_TOG    &none         &none         &none         &none         &none         &sys_reset
                             &none         &trans        &none         &trans          &trans        &none         &trans        &none
            >;
        };
    };
};
